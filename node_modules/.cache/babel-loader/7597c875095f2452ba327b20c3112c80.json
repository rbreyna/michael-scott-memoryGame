{"ast":null,"code":"var _jsxFileName = \"/Users/rbreyna/Desktop/HW Assignments/clicky-game/clicky-game/src/App.js\";\nimport React, { Component } from \"react\";\nimport Wrapper from \"./components/Wrapper\";\nimport Col from \"react-bootstrap/Col\";\nimport Nav from \"./components/Navbar\";\nimport Cards from \"./components/Cards\";\nimport characters from \"./memory-cards.json\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\nconst initialState = {\n  characters,\n  currentScore: 0\n};\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      currentScore: 0\n    };\n\n    this.shuffleArray = arr => {\n      var counter = arr.length;\n      var random;\n      var temp; // While there are elements in the array\n\n      while (counter > 0) {\n        // Pick a random index\n        random = Math.floor(Math.random() * counter); // Decrease ctr by 1\n\n        counter--; // And swap the last element with it\n\n        temp = arr[counter];\n        arr[counter] = arr[random];\n        arr[random] = temp;\n      }\n\n      return arr;\n    };\n\n    this.handleOnClick = id => {\n      var index;\n      console.log(\"You've clicked \" + id + \"!\");\n      let obj = this.state.characters.find(o => o.id === id);\n\n      if (!obj.clicked) {\n        index = this.state.characters.findIndex(x => x.id === id); //Makes copy of characters\n\n        let characterCopy = [...this.state.characters];\n        characterCopy[index].clicked = true;\n        this.setState({\n          characters: characterCopy,\n          currentScore: this.state.currentScore + 1\n        }, () => {\n          if (this.state.currentScore > this.state.topScore) {\n            this.setState({\n              topScore: this.state.currentScore\n            });\n          }\n        });\n      } else {\n        index = this.state.characters.findIndex(x => x.id === id);\n        alert(\"You've already choosen \" + this.state.characters[index].name + \"!\");\n        let characterCopy = [...this.state.characters];\n\n        for (var i = 0; i < characterCopy; i++) {\n          if (characterCopy[i].clicked) {\n            characterCopy[i].clicked = false;\n          }\n        }\n\n        this.setState({\n          currentScore: 0,\n          characters: characterCopy\n        });\n        console.log(this.state.characters);\n        return true;\n      }\n    };\n\n    this.state = initialState, {\n      topScore: 0\n    };\n  }\n\n  reset() {\n    this.setState(initialState);\n  }\n  /* etc */\n\n\n  render() {\n    return /*#__PURE__*/React.createElement(Wrapper, {\n      className: \"bg-dark\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Nav, {\n      currentScore: this.state.currentScore,\n      topScore: this.state.topScore,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"container col-xl-6\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 21\n      }\n    }, this.shuffleArray(this.state.characters).map(persona => /*#__PURE__*/React.createElement(Cards, {\n      key: persona.id,\n      id: persona.id,\n      clicked: persona.clicked,\n      image: persona.image,\n      clickHandler: this.handleOnClick,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 29\n      }\n    })))));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/rbreyna/Desktop/HW Assignments/clicky-game/clicky-game/src/App.js"],"names":["React","Component","Wrapper","Col","Nav","Cards","characters","initialState","currentScore","App","constructor","props","state","shuffleArray","arr","counter","length","random","temp","Math","floor","handleOnClick","id","index","console","log","obj","find","o","clicked","findIndex","x","characterCopy","setState","topScore","alert","name","i","reset","render","map","persona","image"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport Wrapper from \"./components/Wrapper\"\nimport Col from \"react-bootstrap/Col\"\nimport Nav from \"./components/Navbar\"\nimport Cards from \"./components/Cards\"\nimport characters from \"./memory-cards.json\"\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nconst initialState ={\n    characters,\n    currentScore: 0\n}\n\nclass App extends Component {\n\n  \n    constructor(props) {\n        super(props)\n        this.state = initialState, {topScore: 0}\n        }\n        reset() {\n            this.setState(initialState);\n        }\n        /* etc */\n\n    state = {\n \n        currentScore: 0,\n    };\n\n    shuffleArray = arr => {\n\n        var counter = arr.length\n        var random;\n        var temp;\n\n        // While there are elements in the array\n        while (counter > 0) {\n            // Pick a random index\n            random = Math.floor(Math.random() * counter);\n            // Decrease ctr by 1\n            counter--;\n            // And swap the last element with it\n            temp = arr[counter];\n            arr[counter] = arr[random];\n            arr[random] = temp;\n        }\n        return arr;\n    }\n\n    handleOnClick = (id) => {\n\n        var index;\n\n        console.log(\"You've clicked \" + id + \"!\")\n\n        let obj = this.state.characters.find(o => o.id === id);\n\n        if (!obj.clicked) {\n\n            index = this.state.characters.findIndex(x => x.id === id);\n\n            //Makes copy of characters\n            let characterCopy = [...this.state.characters];\n            characterCopy[index].clicked = true;\n            this.setState({\n                characters: characterCopy,\n                currentScore: this.state.currentScore + 1\n            }, () => {\n                if (this.state.currentScore > this.state.topScore) {\n                    this.setState({ topScore: this.state.currentScore })\n                }\n            });\n\n        } else {\n            index = this.state.characters.findIndex(x => x.id === id);\n            alert(\"You've already choosen \" + this.state.characters[index].name + \"!\")\n\n            let characterCopy = [...this.state.characters];\n\n            for (var i = 0; i < characterCopy; i++) {\n\n                if (characterCopy[i].clicked) {\n\n                    characterCopy[i].clicked = false;\n                }\n            }\n\n            this.setState({\n                currentScore: 0,\n                characters: characterCopy\n            })\n\n            console.log(this.state.characters)\n            return true;\n\n        }\n\n\n    }\n\n\n    render() {\n\n\n        return (\n            <Wrapper className=\"bg-dark\">\n                <Nav currentScore={this.state.currentScore} topScore={this.state.topScore} />\n                <div className=\"container col-xl-6\" >\n                    <Col >\n                        {this.shuffleArray(this.state.characters).map(persona =>\n                            <Cards\n                                key={persona.id}\n                                id={persona.id}\n                                clicked={persona.clicked}\n                                image={persona.image}\n                                clickHandler={this.handleOnClick}>\n                            </Cards>)}\n                    </Col>\n                </div>\n            </Wrapper >\n        )\n    }\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}