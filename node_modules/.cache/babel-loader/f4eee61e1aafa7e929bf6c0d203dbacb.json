{"ast":null,"code":"var _jsxFileName = \"/Users/rbreyna/Desktop/HW Assignments/clicky-game/clicky-game/src/App.js\";\nimport React, { Component } from \"react\";\nimport Wrapper from \"./components/Wrapper\";\nimport Col from \"react-bootstrap/Col\";\nimport Nav from \"./components/Navbar\";\nimport Cards from \"./components/Cards\";\nimport characters from \"./memory-cards.json\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      characters,\n      topScore: 0,\n      currentScore: 0\n    };\n\n    this.shuffleArray = arr => {\n      var counter = arr.length;\n      var random;\n      var temp; // While there are elements in the array\n\n      while (counter > 0) {\n        // Pick a random index\n        random = Math.floor(Math.random() * counter); // Decrease ctr by 1\n\n        counter--; // And swap the last element with it\n\n        temp = arr[counter];\n        arr[counter] = arr[random];\n        arr[random] = temp;\n      }\n\n      return arr;\n    };\n\n    this.handleOnClick = id => {\n      var index;\n      console.log(\"You've clicked \" + id + \"!\");\n      let obj = this.state.characters.find(o => o.id === id);\n\n      if (!obj.clicked) {\n        index = this.state.characters.findIndex(x => x.id === id);\n        console.log(index); //Makes copy of characters\n\n        let characterCopy = [...this.state.characters];\n        characterCopy[index].clicked = true;\n        this.setState({\n          characters: characterCopy\n        }, () => {\n          this.setState({\n            currentScore: this.state.currentScore + 1\n          });\n        }); //console.log(this.state.characters[index].name)\n      } else {\n        console.log(\"You've already choosen \" + this.state.characters[index].name + \"!\");\n        console.log(this.setState({\n          currentScore: 0\n        }));\n      }\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(Wrapper, {\n      className: \"bg-dark\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Nav, {\n      currentScore: this.state.currentScore,\n      topScore: this.state.topScore,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"container col-xl-6\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 21\n      }\n    }, this.shuffleArray(this.state.characters).map(persona => /*#__PURE__*/React.createElement(Cards, {\n      key: persona.id,\n      id: persona.id,\n      clicked: persona.clicked,\n      image: persona.image,\n      clickHandler: this.handleOnClick,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 29\n      }\n    })))));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/rbreyna/Desktop/HW Assignments/clicky-game/clicky-game/src/App.js"],"names":["React","Component","Wrapper","Col","Nav","Cards","characters","App","state","topScore","currentScore","shuffleArray","arr","counter","length","random","temp","Math","floor","handleOnClick","id","index","console","log","obj","find","o","clicked","findIndex","x","characterCopy","setState","name","render","map","persona","image"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport Wrapper from \"./components/Wrapper\"\nimport Col from \"react-bootstrap/Col\"\nimport Nav from \"./components/Navbar\"\nimport Cards from \"./components/Cards\"\nimport characters from \"./memory-cards.json\"\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nclass App extends Component {\n\n    state = {\n        characters,\n        topScore: 0,\n        currentScore: 0,\n    };\n\n    shuffleArray = arr => {\n\n        var counter = arr.length\n        var random;\n        var temp;\n\n        // While there are elements in the array\n        while (counter > 0) {\n            // Pick a random index\n            random = Math.floor(Math.random() * counter);\n            // Decrease ctr by 1\n            counter--;\n            // And swap the last element with it\n            temp = arr[counter];\n            arr[counter] = arr[random];\n            arr[random] = temp;\n        }\n        return arr;\n    }\n\n    handleOnClick = (id)=>{\n\n        var index;\n\n        console.log(\"You've clicked \" + id +\"!\")\n\n        let obj = this.state.characters.find(o => o.id === id);\n        \n        if(!obj.clicked){   \n\n            index = this.state.characters.findIndex(x => x.id === id);\n            \n            console.log(index)\n\n             //Makes copy of characters\n            let characterCopy = [...this.state.characters];\n            characterCopy[index].clicked = true;\n            this.setState({characters: characterCopy}, ()=>{ \n            this.setState({currentScore: this.state.currentScore + 1});});\n            \n            //console.log(this.state.characters[index].name)\n        }  else {\n            \n            console.log(\"You've already choosen \" + this.state.characters[index].name + \"!\")\n            console.log(this.setState({currentScore: 0}))\n        }\n            \n        \n        }\n    \n\n    render() {\n\n\n        return (\n            <Wrapper className=\"bg-dark\">\n                <Nav currentScore={this.state.currentScore} topScore = {this.state.topScore}/>\n                <div className=\"container col-xl-6\" >\n                    <Col >\n                        {this.shuffleArray(this.state.characters).map(persona =>\n                            <Cards \n                            key={persona.id} \n                            id={persona.id} \n                            clicked ={persona.clicked} \n                            image={persona.image} \n                            clickHandler ={this.handleOnClick}>\n                            </Cards>)}\n                    </Col>\n                </div>\n            </Wrapper >\n        )\n    }\n}\n\n    export default App;"]},"metadata":{},"sourceType":"module"}